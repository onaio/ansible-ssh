---
- name: Create temporary directory for storing authorized CA keys
  delegate_to: "127.0.0.1"
  become: "{{ ssh_become_local_user }}"
  become_user: "{{ ssh_local_user }}"
  file:
    path: "/tmp/{{ ssh_local_user }}"
    state: directory
    mode: "0700"
    owner: "{{ ssh_local_user }}"

- name: Download authorized CA keys from Vault
  delegate_to: "127.0.0.1"
  become: "{{ ssh_become_local_user }}"
  become_user: "{{ ssh_local_user }}"
  shell:
    cmd: "vault login -address={{ ssh_vault_url }} -method={{ ssh_vault_login_method }} && vault read -address={{ ssh_vault_url }} -field=public_key {{ item.src }}/config/ca > /tmp/{{ ssh_local_user }}/{{ item.name }}"
  environment:
    AWS_PROFILE: "{{ ssh_aws_profile }}"
  with_items: "{{ ssh_vault_trusted_user_ca_keys }}"

- name: Make sure the temporary combined CA certs file doesn't exist
  delegate_to: "127.0.0.1"
  become: "{{ ssh_become_local_user }}"
  become_user: "{{ ssh_local_user }}"
  file:
    path: "/tmp/{{ ssh_local_user }}/{{ ssh_ca_file }}"
    state: absent

- name: Copy the downloaded CA keys to one file
  delegate_to: "127.0.0.1"
  become: "{{ ssh_become_local_user }}"
  become_user: "{{ ssh_local_user }}"
  shell:
    cmd: "cur_ssh_cert=`cat /tmp/{{ ssh_local_user }}/{{ item.name }}` && cur_ssh_cert=\"${cur_ssh_cert} {{ item.name }}\" && echo \"${cur_ssh_cert}\" >> /tmp/{{ ssh_local_user }}/{{ ssh_ca_file }}"
  with_items: "{{ ssh_vault_trusted_user_ca_keys }}"

- name: Make sure the trusted CAs Directory exists
  file:
    path: "/etc/ssh/ca"
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Copy the combined authrized CA certs file
  copy:
    src: "/tmp/{{ ssh_local_user }}/{{ ssh_ca_file }}"
    dest: "/etc/ssh/ca/{{ ssh_ca_file }}"
    owner: "root"
    group: "root"
    mode: "0644"
  when: ssh_vault_trusted_user_ca_keys|length > 0
  notify:
    - "reload ssh"

- name: Set value for X11Forwarding
  lineinfile:
    path: "/etc/ssh/sshd_config"
    line: "X11Forwarding {{ ssh_x11_forwarding }}"
    regexp: '^X11Forwarding'
  notify:
    - "reload ssh"

- name: Set value for MaxAuthTries
  lineinfile:
    path: "/etc/ssh/sshd_config"
    line: "MaxAuthTries {{ ssh_max_auth_retries }}"
    regexp: '^MaxAuthTries'
  notify:
    - "reload ssh"
